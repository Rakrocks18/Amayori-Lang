name: CI/CD Pipeline

on:
  schedule:
    # Runs at 00:00 UTC every day
    - cron: '45 6 * * *'
  push:
    branches: [ master ]
  workflow_dispatch:  # Allows manual triggering

env:
  DOCKER_REPOSITORY: rakrocks18/amayori-lang

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'  # Specify the Node.js version you need

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
      shell: bash

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Determine version and tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "::set-output name=version::nightly-$(date +'%Y%m%d')"
          echo "::set-output name=release_name::Nightly Build $(date +'%Y-%m-%d')"
          echo "::set-output name=prerelease::true"
        else
          VERSION=$(npm version patch -m "Bump version to %s" --no-git-tag-version)
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=release_name::Release $VERSION"
          echo "::set-output name=prerelease::false"
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ steps.version.outputs.version }}
          ${{ env.DOCKER_REPOSITORY }}:latest

    - name: Create Git Tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a ${{ steps.version.outputs.version }} -m "${{ steps.version.outputs.release_name }}"
        git push origin ${{ steps.version.outputs.version }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: ${{ steps.version.outputs.release_name }}
        draft: false
        prerelease: ${{ steps.version.outputs.prerelease }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./path/to/your/asset.zip  # Replace with the path to your build artifact
        asset_name: release-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
